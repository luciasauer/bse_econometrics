---
title: "Econometrics"
subtitle: "<span class=\"subtitle-text\">TA Session 1</span>"
author: "Lucia Sauer"
institute: "<em>Barcelona School of Economics</em>"
date: "2025-09-25"
format:
  revealjs:
    #theme: metropolis
    transition: fade
    slide-number: true
    progress: true
    title-slide-attributes:
      data-background-position: "95% 90%"
      data-background-size: "100px"
editor:
  render-on-save: true
---

## TA Materials

All the material for this course â€” slides, code, and some LaTeX utilities for referencing assignments â€” will be hosted in the [GitHub repository](https://github.com/luciasauer/bse_econometrics#).



> <code>git clone HHTPS</code>

Install uv

> <code>uv sync</code>

Pull the repository and get the updated materials for each session.

---

## Overview

- Matrix Algebra with Python and R
- Derivatives with vectors
- Histograms and KDE
- Quick LaTex guide

---

## Why These Topics?

::: {.callout-tip title = "Matrix Algebra" icon=false}
- Compact notation for regression & multivariate models
- Solve systems efficiently with Python
:::

::: {.callout-tip title = "Derivatives with Vectors" icon=false}

- Gradients for optimization & ML
- Key for regression, loss functions
:::

::: {.callout-tip title = "Histograms & KDE" icon=false}

- Explore data shape: skewness, modality, outliers
- Nonparametric distribution estimation & model checks
:::

---

## System of equations in Matrix Form
Consider the following system of equations:
$$
\begin{cases}
2x_1 + 3x_2 + 10x_3 = 5 \\
4x_1 + x_2 + 12x_3 = 6 \\
7x_1 + 2x_2 + x_3 = 10
\end{cases}
$$

::: {.callout-warning title="Exercises" icon="false"}
- How can we write this system in matrix form?
- Solve it using Python.
:::
---

## Matrix Operations using Python

```{python}
#| echo: true
#| code-line-numbers: "1-2|3-7|8-10|11-13|14-15|16"
import numpy as np

#Define matrix A and vector b
A = np.array([[2, 3, 10],
                 [4 , 1, 12],
                 [7 , 2, 1]])
b = np.array([5 , 6, 10])

#Inverse A
A_inverse = np.linalg.inv(A)

x = np.dot(A_inverse, b)
print('Solution: ', x)
```

---

## Matrix Operations using R

```{python}
#| echo: true
#| eval: false
# Define matrix A and vector b
A <- matrix(c(2, 3, 10,
              4, 1, 12,
              7, 2, 1),
            nrow = 3, byrow = TRUE)

b <- c(5, 6, 10)

# Inverse A
A_inverse <- solve(A)
x <- A_inverse %*% b

# Solve Ax = b
x <- solve(A, b)
print(x)
```
---

## Derivatives of a vector

::: {.callout-note title="Gradient with respect to a vector" appearance="default" icon="false"}
- In single-variable calculus:  

    $\frac{d}{dx} f(x)$ is the slope of a scalar function of one variable.  

- In multivariable calculus: 

    If $f(z_1, z_2)$, we can group the variables into a vector:
    
    $$ z = \begin{bmatrix} z_1 \\ z_2 \end{bmatrix} $$

  then the derivative with respect to a vector is the **gradient**:  

    $$
    \nabla_z f(z) =
    \begin{bmatrix}
    \frac{\partial f}{\partial z_1} \\[6pt]
    \frac{\partial f}{\partial z_2}
    \end{bmatrix}
    $$

ðŸ‘‰ Take the partial derivative with respect to each coordinate, then stack them in a column vector.
:::

---

Consider:
$$
a = \begin{bmatrix}
a_1 \\
a_2
\end{bmatrix}
\quad
z = \begin{bmatrix}
z_1 \\
z_2
\end{bmatrix}
\quad
B = \begin{bmatrix}
b_{11} & b_{12} \\
b_{21} & b_{22}
\end{bmatrix}
$$

::: {.callout-warning title="Exercises" icon=false}
Verify, by showing all the relevant steps, that:

$$
\begin{aligned}
(i) & \quad \frac{\partial z'a}{\partial a} = z \\[6pt]
(ii) & \quad \frac{\partial a'z}{\partial z} = a \\[6pt]
(iii)& \quad \frac{\partial z'B z}{\partial z} = 2Bz \quad \text{since B is symmetric}
\end{aligned}
$$
:::
---

## Density Estimation - Introduction
Given some observations from some variable $X$, we would like to obtain an estimate of its density.

::: {.callout-note title="*Parametric vs Nonparametric*" icon="false"}
- **Parametric approach**: we would choose a parametric density function (normal, exponential, uniform, etc) and use data to estimate the parameters of this density.

<span style="color:blue">*Problem: what if $X$ doesnâ€™t follow a normal distribution?*</span>

- **Nonparametric approach** like histograms and KD estimate the distribution of a variable $X$ without strong parametric assumptions.
:::

---

## Histogram
> **Key idea:** A histogram is a graphical tool to visualize the distribution of a dataset.

::: columns

::: column


- A **nonparametric method** to estimate the probability density function (PDF)  
- Groups data into **intervals (bins)**  
- Plots the **frequency** of data points in each bin  

:::

::: column
```{python}
#| echo: false
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

sns.set(style="whitegrid", context="talk")

# Example data
np.random.seed(42)
x = np.random.normal(0, 1, 500)

# Create figure and axes
fig, ax = plt.subplots(figsize=(6,5))

# Plot histogram
sns.histplot(x, bins=15, color='purple', edgecolor='black', stat='density', ax=ax)

# Labels
ax.set_xlabel('X')
ax.set_ylabel('Density')

# Hide top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set bottom and left spines to black
ax.spines["bottom"].set_color("black")
ax.spines["left"].set_color("black")

# Set tick color to black
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")

plt.tight_layout()
plt.show()

```
:::
:::

---

## Concept of Density

Let's first differentiate between frequency histograms and density histograms.

Suppose a dataset with 12 observations:

`[2, 3, 5, 5, 6, 8, 8, 8, 10, 12, 15, 17]`

### Step 1: Calculate the binwidth of each bin

If we want to create a histogram with 3 bins:

- $\text{min value} = 2$
- $\text{max value} = 17$
- $\text{range} = \text{max value} - \text{min value} = 15$
- $\text{binwidth} = \frac{\text{range}}{n\_bins} = \frac{15}{3} = 5$

---

## Concept of Density

Let's first differentiate between frequency histograms and density histograms.

### Step 2: Define the limits of each bin

| Bins         | Frequency  | 
|--------------|------------|
| [2-7)        | 5          |
| [7-12)       | 4          |
| [12-17]      | 3          |


---

## Concept of Density

Let's first differentiate between frequency histograms and density histograms.

### Step 3: Add Density

| Bins         | Frequency  | Width | Density |
|--------------|------------|-------|---------|
| [2-7)        | 5          | 5     | $5 / (12*5) = 0.0833$ |
| [7-12)       | 4          | 5     | $4 / (12*5) = 0.0667$ |
| [12-17]      | 3          | 5     | $3 / (12*5) = 0.05$ |


::: {.fragment}

Mathematically, for bin width $h$ and number of observations $n$: <div style="text-align: center;"> <div style="border:2px solid #9d03c4ff; padding:10px; border-radius:8px; background-color:#f5e6ff; display:inline-block;"> $$ \hat{f(x)} = \frac{1}{nh} \sum_{i=1}^n \mathbf{1}\{x_i \in \text{bin}(x)\} $$ </div> </div>

:::

---

### Coding Example in Python
Important parameters <code>bins</code>, <code>stat</code>, <code>binwidth</code>, <code>binrange</code>
```{python}
#| echo: true
#| eval: false
import seaborn as sns
x = sns.load_dataset("tips")["total_bill"]
bins = [15, 30, 70]
for bin in bins:
  sns.histplot(x,bins=bin, stat='density', binwidth=None, binrange=None)
```

```{python}
#| echo: false
#| eval: true
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
x = sns.load_dataset("tips")["total_bill"]

# Create 1 row, 3 columns
fig, axes = plt.subplots(1, 3, figsize=(15, 6), sharey=True)

# Different bin settings
bin_settings = [15, 30, 70]
colors = ['purple', 'darkblue', 'orange']
for ax, bins,color in zip(axes, bin_settings, colors):
    sns.histplot(x, bins=bins, stat="density", color=color, edgecolor="black", ax=ax)
    ax.set_title(f"bins = {bins}")
    ax.set_xlabel("Total Bill")
    ax.set_ylabel("Density")
    
    # Hide top and right spines
    ax.spines["top"].set_visible(False)
    ax.spines["right"].set_visible(False)
    ax.spines["bottom"].set_color("black")
    ax.spines["left"].set_color("black")

plt.tight_layout()
plt.show()

```

---

### Coding Example in Python
Important parameters <code>bins</code>, <code>stat</code>, <code>binwidth</code>, <code>binrange</code>
```{python}
#| echo: true
#| eval: false
import seaborn as sns
x = sns.load_dataset("tips")["total_bill"]
bin_widths = [3, 7, 14]
for bin_w in bin_widths:
  sns.histplot(x,bins=None, stat='density', binwidth=bin_w, binrange=None)
```

```{python}
#| echo: false
#| eval: true
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
x = sns.load_dataset("tips")["total_bill"]

# Create 1 row, 3 columns
fig, axes = plt.subplots(1, 3, figsize=(15, 6), sharey=True)

# Different bin settings
bin_widths = [3, 7, 14]
colors = ['purple', 'darkblue', 'orange']
for ax, bin_w, color in zip(axes, bin_widths, colors):
    sns.histplot(x, bins=None, stat="density", color=color, edgecolor="black", ax=ax, binwidth=bin_w)
    ax.set_title(f"bin width = {bin_w}")
    ax.set_xlabel("Total Bill")
    ax.set_ylabel("Density")
    
    # Hide top and right spines
    ax.spines["top"].set_visible(False)
    ax.spines["right"].set_visible(False)
    ax.spines["bottom"].set_color("black")
    ax.spines["left"].set_color("black")

plt.tight_layout()
plt.show()

```


---
### Coding Example in R
Important parameters: <code>bins</code>, <code>aes(y = ..stat..)</code>, <code>binwidth</code>, <code>xlim()</code>
```{python}
#| echo: true
#| eval: false

library(ggplot2)
library(readr)

tips <- read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv")
x <- tips$total_bill

bins <- c(15, 30, 70)
for (bin in bins) {
  p <- ggplot(data = data.frame(x = x), aes(x = x)) +
    geom_histogram(aes(y = ..density..), bins = bin, color = "black", fill = "skyblue")
  print(p)
}
```

---

## Kernel Density Estimation

> **Key idea:** Smooth, nonparametric estimate of the probability density function

::: columns

::: column


- Instead of counting frequencies in bins, KDE places a smooth kernel function (usually Gaussian) centered at each data point, and then averages them.



:::

::: column
```{python}
#| echo: false
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

sns.set(style="whitegrid", context="talk")

# Example data
np.random.seed(42)
x = np.random.normal(0, 1, 500)

# Create figure and axes
fig, ax = plt.subplots(figsize=(6,5))

# Plot histogram with KDE
sns.histplot(x, bins=15, color='purple', edgecolor='black', stat='density', kde=True, ax=ax)

# Labels
ax.set_xlabel('X')
ax.set_ylabel('Density')

# Hide top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set bottom and left spines to black
ax.spines["bottom"].set_color("black")
ax.spines["left"].set_color("black")

# Set tick color to black
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")

plt.tight_layout()

plt.show()

```
:::
:::

---

**Mathematical formulation:**

<div style="text-align: center;">
  <div style="border:2px solid #9d03c4ff; padding:10px; border-radius:8px; background-color:#f5e6ff; display:inline-block;">
  $$\hat{f}_h(x) = \frac{1}{nh} \sum_{i=1}^n K\left(\frac{x - x_i}{h}\right)  $$
  </div>
</div>


- $N$ is the number of observations
- $h$ is the bandwidth (controls how
much the influence of each observation expands)
- and, $K$ is the Kernel, a function that defines the
shape and distribution of influence associated with each observation.

---

### Coding Example in Python
```{python}
#| echo: true
#| eval: false
import seaborn as sns
x = sns.load_dataset('tips')['total_bill']
for bw in [0.3, 2, 10]:
    sns.kdeplot(x, bw_adjust=bw, label=f"Bandwidth = {bw}")
```

```{python}
#| echo: false
#| eval: true
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid", context="talk")

# Load data
x = sns.load_dataset("tips")["total_bill"]

# Create figure and axes
fig, ax = plt.subplots(figsize=(10,6))

# Different bandwidths (smaller â†’ more wiggly, larger â†’ smoother)
for color, bw in zip(['purple', 'darkblue', 'darkorange'], [0.3, 2, 10]):
    sns.kdeplot(x, bw_adjust=bw, label=f"Bandwidth = {bw}", color=color, fill=True, ax=ax)

# Labels and legend
ax.set_xlabel("Total Bill")
ax.set_ylabel("Density")
ax.legend()

# Hide top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set bottom and left spines to black
ax.spines["bottom"].set_color("black")
ax.spines["left"].set_color("black")

# Set tick color to black
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")

plt.tight_layout()
plt.show()

```

- Small $h$: very wiggly estimate (low bias, high variance).
- Large $h$: oversmoothed estimate (high bias, low variance).

---

### Bandwidth in KDE with Python
```{python}
#| echo: false
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from scipy.stats import gaussian_kde

# Generate random variables from N(0,1)
np.random.seed(0)
data = np.random.randn(1000)

# Create x values for smooth curves
x_range = np.linspace(data.min() - 1, data.max() + 1, 200)

# Different bandwidth values
bandwidths = [0.01, 0.03, 0.5, 0.8, 2.0]
colors = ['rgba(0,128,0,0.8)', 'rgba(255,0,0,0.8)', 'rgba(0,0,255,0.8)', 
          'rgba(255,165,0,0.8)', 'rgba(128,0,128,0.8)']

fig = go.Figure()

for i, bw in enumerate(bandwidths):
    # Create KDE with specified bandwidth
    kde = gaussian_kde(data, bw_method=bw)
    kde_values = kde(x_range)
    
    fig.add_trace(go.Scatter(
        x=x_range,
        y=kde_values,
        mode='lines',
        name=f'Bandwidth: {bw}',
        line=dict(color=colors[i], width=3),
        fill='tozeroy',
        visible=True if i == 2 else False  # Show middle option by default
    ))

# Add dropdown menu for interactivity
fig.update_layout(
    title='Interactive KDE - Bandwidth Selection',
    xaxis_title='Value',
    yaxis_title='Density',
    updatemenus=[
        dict(
            buttons=list([
                dict(label=f"Bandwidth: {bw}",
                     method="update",
                     args=[{"visible": [i == j for j in range(len(bandwidths))]}])
                for i, bw in enumerate(bandwidths)
            ]),
            direction="down",
            showactive=True,
            x=0.01,
            xanchor="left",
            y=1.02,
            yanchor="top"
        ),
    ],
    width=800,
    height=500
)

fig.show()
```

---

### Coding example in R

```{python}
#| echo: true
#| eval: false
library(ggplot2)
library(readr)

tips <- read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv")
x <- tips$total_bill

for (bw in c(0.3, 1, 2)) {
  print(ggplot(data.frame(x = x), aes(x = x)) + 
          geom_density(adjust = bw, color = "blue") +
          ggtitle(paste("Bandwidth =", bw)))
}
```


# Thanks!
