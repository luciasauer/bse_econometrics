---
title: "Econometrics"
subtitle: "<span class=\"subtitle-text\">TA Session 1</span>"
author: "Lucia Sauer"
institute: "<em>Barcelona School of Economics</em>"
date: "Fall 2025"
format:
  revealjs:
    # theme: cosmo.scss
    transition: fade
    slide-number: true
    progress: true
    title-slide-attributes:
      data-background-image: bse_logo.svg
      data-background-position: "95% 90%"
      data-background-size: "100px"
editor:
  render-on-save: true
---


### Overview

- Matrix manipulation
- Derivatives with vectors
- Simulate behaviour of one random variable
- Kernel Density Estimation (KDE)

---

#### Why These Topics?

- **Matrix Algebra**: regression models use compact matrix notation  
- **KDE**: nonparametric way to estimate distributions  
- Both are fundamental for econometrics and data science

---
### Matrix Algebra
####  Linear Systems in Matrix Form 
A linear system of equations can be written in matrix form as:
$$
A\mathbf{x}=\mathbf{b}
$$
For example, consider the system of equations:
$$
2x_1 + 3x_2 = 5\\
4x_1 + x_2 = 6\\
$$
This system can be written in matrix form as:
$$
\begin{bmatrix}
2 & 3 \\
4 & 1
\end{bmatrix}
\begin{bmatrix}
x_1 \\
x_2
\end{bmatrix}
=
\begin{bmatrix}
5 \\
6
\end{bmatrix}
$$

---

We want to solve $A\mathbf{x} = \mathbf{b}$, i.e., $\mathbf{x} = A^{-1}\mathbf{b}$. 

Then the inverse of $A$ is:

$$
A^{-1}
=-\frac{1}{10}
\begin{bmatrix}
1 & -3 \\
-4 & 2
\end{bmatrix}=
\begin{bmatrix}
-\frac{1}{10} & \frac{3}{10} \\
\frac{4}{10} & -\frac{2}{10}
\end{bmatrix}
$$

Now, we multiply the inverse of $A$ by $\mathbf{b}$

$$
\mathbf{x}
= A^{-1}\mathbf{b}=
\begin{bmatrix}
-\frac{1}{10} & \frac{3}{10} \\
\frac{4}{10} & -\frac{2}{10}
\end{bmatrix}
\begin{bmatrix}
5 \\
6
\end{bmatrix}
$$

$$
\mathbf{x}
= 
\begin{bmatrix}
x_1 \\
x_2
\end{bmatrix}
= 
\begin{bmatrix}
1.3\\
0.8
\end{bmatrix}
$$
---
#### Matrix Operations using Python
```{python}
#| echo: true
#| code-line-numbers: "1-2|3-4|5-6|7-9|10-12|13-14"
import numpy as np

#Define matrix A and vector b
A = np . array ([[2 , 3] , [4 , 1]])
b = np . array ([5 , 6])

#Transpose A
A_transpose = np.transpose(A)

#Inverse A
A_inverse = np.linalg.inv(A)

x = np.dot(A_inverse, b)
print('Solution: ', x)
```

### Sorete

--- 

# Caca

